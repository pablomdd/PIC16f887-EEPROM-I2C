Version 3.2 HI-TECH Software Intermediate Code
"350 C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c
[v _dpowers `Cul  -> 0 `x s ]
"384 C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c
[v __npowers_ `Cd  -> 0 `x e ]
"384 C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c
[v __powers_ `Cd  -> 0 `x e ]
"34 C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdarg.h
[v ___va_start `(*v  0 ef ]
[p i ___va_start ]
"6 C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\ctype.h
[v _isdigit `(b  0 ef1`uc ]
"37 C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdarg.h
[v ___va_arg `(*v  0 ev`*v ]
[p i ___va_arg ]
"390 C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c
[v __tdiv_to_l_ `(ul  0 ef2`f`f ]
"388 C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c
[v __div_to_l_ `(ul  0 ef2`d`d ]
[; ;stdio.h: 12: typedef int ptrdiff_t;
[; ;stdio.h: 13: typedef unsigned size_t;
[; ;stdio.h: 14: typedef unsigned short wchar_t;
[; ;stdarg.h: 31: typedef void * va_list[1];
[; ;stdarg.h: 34: extern void * __va_start(void);
[; ;stdarg.h: 37: extern void * __va_arg(void *, ...);
[; ;stdio.h: 27: extern int errno;
[; ;stdio.h: 58: struct __prbuf
[; ;stdio.h: 59: {
[; ;stdio.h: 60: char * ptr;
[; ;stdio.h: 61: void (* func)(char);
[; ;stdio.h: 62: };
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;stdio.h: 103: extern int cprintf(char *, ...);
[; ;stdio.h: 108: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 195: extern char * gets(char *);
[; ;stdio.h: 196: extern int puts(const char *);
[; ;stdio.h: 197: extern int scanf(const char *, ...);
[; ;stdio.h: 198: extern int sscanf(const char *, const char *, ...);
[; ;stdio.h: 199: extern int vprintf(const char *, va_list);
[; ;stdio.h: 200: extern int vsprintf(char *, const char *, va_list);
[; ;stdio.h: 201: extern int vscanf(const char *, va_list ap);
[; ;stdio.h: 202: extern int vsscanf(const char *, const char *, va_list);
[; ;stdio.h: 206: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 207: extern int printf(const char *, ...);
[; ;ctype.h: 3: extern bit isalpha(char);
[; ;ctype.h: 4: extern bit isupper(char);
[; ;ctype.h: 5: extern bit islower(char);
[; ;ctype.h: 6: extern bit isdigit(char);
[; ;ctype.h: 7: extern bit isxdigit(char);
[; ;ctype.h: 8: extern bit isspace(char);
[; ;ctype.h: 9: extern bit ispunct(char);
[; ;ctype.h: 10: extern bit isalnum(char);
[; ;ctype.h: 11: extern bit isprint(char);
[; ;ctype.h: 12: extern bit isgraph(char);
[; ;ctype.h: 13: extern bit iscntrl(char);
[; ;ctype.h: 15: extern char toupper(char);
[; ;ctype.h: 16: extern char tolower(char);
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: int rem;
[; ;stdlib.h: 29: int quot;
[; ;stdlib.h: 30: } div_t;
[; ;stdlib.h: 31: typedef struct {
[; ;stdlib.h: 32: unsigned rem;
[; ;stdlib.h: 33: unsigned quot;
[; ;stdlib.h: 34: } udiv_t;
[; ;stdlib.h: 35: typedef struct {
[; ;stdlib.h: 36: long quot;
[; ;stdlib.h: 37: long rem;
[; ;stdlib.h: 38: } ldiv_t;
[; ;stdlib.h: 39: typedef struct {
[; ;stdlib.h: 40: unsigned long quot;
[; ;stdlib.h: 41: unsigned long rem;
[; ;stdlib.h: 42: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 70: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 72: extern int rand(void);
[; ;stdlib.h: 73: extern void srand(unsigned int);
[; ;stdlib.h: 74: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 75: extern div_t div(int numer, int denom);
[; ;stdlib.h: 76: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 77: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 78: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 79: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 80: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 81: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 82: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 106: extern void * malloc(size_t);
[; ;stdlib.h: 107: extern void free(void *);
[; ;stdlib.h: 108: extern void * realloc(void *, size_t);
[; ;stdlib.h: 122: extern void abort(void);
[; ;stdlib.h: 123: extern void exit(int);
[; ;stdlib.h: 124: extern int atexit(void (*)(void));
[; ;stdlib.h: 125: extern char * getenv(const char *);
[; ;stdlib.h: 126: extern char ** environ;
[; ;stdlib.h: 127: extern int system(char *);
[; ;stdlib.h: 128: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 129: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 130: extern int abs(int);
[; ;stdlib.h: 131: extern long labs(long);
[; ;stdlib.h: 145: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 146: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 147: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 148: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;string.h: 22: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 23: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 24: extern void * memset(void *, int, size_t);
[; ;string.h: 35: extern char * strcat(char *, const char *);
[; ;string.h: 36: extern char * strcpy(char *, const char *);
[; ;string.h: 37: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 38: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 39: extern char * strdup(const char *);
[; ;string.h: 40: extern char * strtok(char *, const char *);
[; ;string.h: 43: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 44: extern int strcmp(const char *, const char *);
[; ;string.h: 45: extern int stricmp(const char *, const char *);
[; ;string.h: 46: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 47: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 48: extern void * memchr(const void *, int, size_t);
[; ;string.h: 49: extern size_t strcspn(const char *, const char *);
[; ;string.h: 50: extern char * strpbrk(const char *, const char *);
[; ;string.h: 51: extern size_t strspn(const char *, const char *);
[; ;string.h: 52: extern char * strstr(const char *, const char *);
[; ;string.h: 53: extern char * stristr(const char *, const char *);
[; ;string.h: 54: extern char * strerror(int);
[; ;string.h: 55: extern size_t strlen(const char *);
[; ;string.h: 56: extern char * strchr(const char *, int);
[; ;string.h: 57: extern char * strichr(const char *, int);
[; ;string.h: 58: extern char * strrchr(const char *, int);
[; ;string.h: 59: extern char * strrichr(const char *, int);
[; ;conio.h: 17: extern int errno;
[; ;conio.h: 20: extern void init_uart(void);
[; ;conio.h: 22: extern char getch(void);
[; ;conio.h: 23: extern char getche(void);
[; ;conio.h: 24: extern void putch(char);
[; ;conio.h: 25: extern void ungetch(char);
[; ;conio.h: 27: extern bit kbhit(void);
[; ;conio.h: 31: extern char * cgets(char *);
[; ;conio.h: 32: extern void cputs(const char *);
[; ;sys.h: 17: extern int errno;
[; ;sys.h: 30: extern int execl(char *, char *, ...);
[; ;sys.h: 31: extern int execv(char *, char **);
[; ;sys.h: 32: extern int execve(char *, char **, char **);
[; ;sys.h: 33: extern int execle(char *, char *, ...);
[; ;sys.h: 34: extern int execvp(char *, char **);
[; ;sys.h: 35: extern int execlp(char *, char *, ...);
[; ;sys.h: 36: extern int getpid(void);
[; ;sys.h: 37: extern char * mktemp(char *);
[; ;sys.h: 51: extern int spawnl(char *, char *, ...);
[; ;sys.h: 52: extern int spawnv(char *, char **);
[; ;sys.h: 53: extern int spawnle(char *, char *, ...);
[; ;sys.h: 54: extern int spawnve(char *, char **, char **);
[; ;sys.h: 55: extern int spawnlp(char *, char *, ...);
[; ;sys.h: 56: extern int spawnvp(char *, char **);
[; ;sys.h: 58: extern int chdir(char *);
[; ;sys.h: 59: extern int chdrv(char *);
[; ;sys.h: 60: extern int mkdir(char *);
[; ;sys.h: 61: extern int rmdir(char *);
[; ;sys.h: 62: extern char * getcwd(char *);
[; ;sys.h: 63: extern void persist_validate(void);
[; ;sys.h: 64: extern int persist_check(int);
[; ;sys.h: 65: extern char * getdrv(void);
[; ;sys.h: 66: extern char ** _getargs(char *, char *);
[; ;sys.h: 67: extern int _argc_;
[; ;sys.h: 78: extern void * sbrk(size_t);
[; ;sys.h: 79: extern void brk(void *);
[; ;sys.h: 85: extern int _pnum(unsigned long, signed char, signed char, unsigned char, unsigned char, struct __prbuf *, unsigned char);
[; ;sys.h: 86: extern int _fnum(double, short, short, short, struct __prbuf *, short);
[; ;math.h: 3: extern double fabs(double);
[; ;math.h: 4: extern double floor(double);
[; ;math.h: 5: extern double ceil(double);
[; ;math.h: 6: extern double modf(double, double *);
[; ;math.h: 7: extern double sqrt(double);
[; ;math.h: 8: extern double atof(const char *);
[; ;math.h: 9: extern double sin(double);
[; ;math.h: 10: extern double cos(double);
[; ;math.h: 11: extern double tan(double);
[; ;math.h: 12: extern double asin(double);
[; ;math.h: 13: extern double acos(double);
[; ;math.h: 14: extern double atan(double);
[; ;math.h: 15: extern double atan2(double, double);
[; ;math.h: 16: extern double log(double);
[; ;math.h: 17: extern double log10(double);
[; ;math.h: 18: extern double pow(double, double);
[; ;math.h: 19: extern double exp(double);
[; ;math.h: 20: extern double sinh(double);
[; ;math.h: 21: extern double cosh(double);
[; ;math.h: 22: extern double tanh(double);
[; ;math.h: 23: extern double eval_poly(double, const double *, int);
[; ;math.h: 24: extern double frexp(double, int *);
[; ;math.h: 25: extern double ldexp(double, int);
[; ;math.h: 26: extern double fmod(double, double);
[; ;math.h: 27: extern double trunc(double);
[; ;math.h: 28: extern double round(double);
"350 C:\Program Files (x86)\HI-TECH Software\PICC\9.82\lib\doprnt.c
[i _dpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 10 `i `l `ul
-> -> -> 100 `i `l `ul
-> -> -> 1000 `i `l `ul
-> -> -> 10000 `i `l `ul
"352
-> -> 100000 `l `ul
-> -> 1000000 `l `ul
-> -> 10000000 `l `ul
-> -> 100000000 `l `ul
"355
-> -> 1000000000 `l `ul
..
]
[; ;doprnt.c: 350: const static unsigned long dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 352: 100000, 1000000, 10000000, 100000000,
[; ;doprnt.c: 353: 1000000000
[; ;doprnt.c: 355: };
[; ;doprnt.c: 384: extern const double _powers_[], _npowers_[];
[; ;doprnt.c: 388: extern unsigned long _div_to_l_(double, double);
[; ;doprnt.c: 390: extern unsigned long _tdiv_to_l_(float, float);
"406
[v _fround `(d  1 sf1`uc ]
{
[; ;doprnt.c: 404: static double
[; ;doprnt.c: 405: fround(unsigned char prec)
[; ;doprnt.c: 406: {
[e :U _fround ]
[v _prec `uc  1 r1 ]
[f ]
[; ;doprnt.c: 409: if(prec>=110)
"409
[e $ ! >= -> _prec `i -> 110 `i 7  ]
[; ;doprnt.c: 410: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npowers_[prec%10];
"410
[e ) * * * .0.5 *U + &U __npowers_ * -> -> + / -> _prec `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _prec `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _prec `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e $U 8  ]
"411
[e :U 7 ]
[; ;doprnt.c: 411: else if(prec > 10)
[e $ ! > -> _prec `i -> 10 `i 9  ]
[; ;doprnt.c: 412: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
"412
[e ) * * .0.5 *U + &U __npowers_ * -> -> + / -> _prec `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _prec `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[e :U 9 ]
"413
[e :U 8 ]
[; ;doprnt.c: 413: return 0.5 * _npowers_[prec];
[e ) * .0.5 *U + &U __npowers_ * -> _prec `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 6  ]
[; ;doprnt.c: 414: }
"414
[e :UE 6 ]
}
"422
[v _scale `(d  1 sf1`c ]
{
[; ;doprnt.c: 420: static double
[; ;doprnt.c: 421: scale(signed char scl)
[; ;doprnt.c: 422: {
[e :U _scale ]
[v _scl `c  1 r1 ]
[f ]
[; ;doprnt.c: 424: if(scl < 0) {
"424
[e $ ! < -> _scl `i -> 0 `i 11  ]
{
[; ;doprnt.c: 425: scl = -scl;
"425
[e = _scl -> -U -> _scl `i `c ]
[; ;doprnt.c: 426: if(scl>=110)
"426
[e $ ! >= -> _scl `i -> 110 `i 12  ]
[; ;doprnt.c: 427: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl%10];
"427
[e ) * * *U + &U __npowers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e $U 13  ]
"428
[e :U 12 ]
[; ;doprnt.c: 428: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 14  ]
[; ;doprnt.c: 429: return _npowers_[scl/10+9] * _npowers_[scl%10];
"429
[e ) * *U + &U __npowers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux *U + &U __npowers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
[e :U 14 ]
"430
[e :U 13 ]
[; ;doprnt.c: 430: return _npowers_[scl];
[e ) *U + &U __npowers_ * -> -> _scl `uc `ux -> -> # *U &U __npowers_ `ui `ux ]
[e $UE 10  ]
"431
}
[e :U 11 ]
[; ;doprnt.c: 431: }
[; ;doprnt.c: 432: if(scl>=110)
"432
[e $ ! >= -> _scl `i -> 110 `i 15  ]
[; ;doprnt.c: 433: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10];
"433
[e ) * * *U + &U __powers_ * -> -> + / -> _scl `i -> 100 `i -> 18 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> + / % -> _scl `i -> 100 `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e $U 16  ]
"434
[e :U 15 ]
[; ;doprnt.c: 434: else if(scl > 10)
[e $ ! > -> _scl `i -> 10 `i 17  ]
[; ;doprnt.c: 435: return _powers_[scl/10+9] * _powers_[scl%10];
"435
[e ) * *U + &U __powers_ * -> -> + / -> _scl `i -> 10 `i -> 9 `i `ui `ux -> -> # *U &U __powers_ `ui `ux *U + &U __powers_ * -> -> % -> _scl `i -> 10 `i `ui `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[e :U 17 ]
"436
[e :U 16 ]
[; ;doprnt.c: 436: return _powers_[scl];
[e ) *U + &U __powers_ * -> -> _scl `uc `ux -> -> # *U &U __powers_ `ui `ux ]
[e $UE 10  ]
[; ;doprnt.c: 437: }
"437
[e :UE 10 ]
}
"488
[v _sprintf `(i  1 e1v`*uc`*Cuc ]
{
[; ;doprnt.c: 451: int
[; ;doprnt.c: 487: sprintf(char * sp, const char * f, ...)
[; ;doprnt.c: 488: {
[e :U _sprintf ]
[v _sp `*uc  1 r1 ]
[v _f `*Cuc  1 r0 ]
[f ]
"489
[v _ap `*v  -> -> 1 `i `ux a ]
"494
[v _c `c  1 a ]
"496
[v _width `i  1 a ]
"499
[v _prec `i  1 a ]
"503
[v _flag `us  1 a ]
"510
[v _d `uc  1 a ]
"511
[v _fval `d  1 a ]
[v _integ `d  1 a ]
"512
[v _exp `i  1 a ]
"513
[v _ival `d  1 a ]
"520
[s S19 `*Cuc 1 `ui 1 ]
[n S19 . _cp _len ]
[u S18 `ul 1 `S19 1 ]
[n S18 . _val _str ]
[v __val `S18  1 a ]
[; ;doprnt.c: 489: va_list ap;
[; ;doprnt.c: 494: signed char c;
[; ;doprnt.c: 496: int width;
[; ;doprnt.c: 499: int prec;
[; ;doprnt.c: 503: unsigned short flag;
[; ;doprnt.c: 510: char d;
[; ;doprnt.c: 511: double fval, integ;
[; ;doprnt.c: 512: int exp;
[; ;doprnt.c: 513: double ival;
[; ;doprnt.c: 514: union {
[; ;doprnt.c: 515: unsigned long _val;
[; ;doprnt.c: 516: struct {
[; ;doprnt.c: 517: const char * _cp;
[; ;doprnt.c: 518: unsigned _len;
[; ;doprnt.c: 519: } _str;
[; ;doprnt.c: 520: } _val;
[; ;doprnt.c: 537: *ap = __va_start();
"537
[e = *U &U _ap ( ___va_start ..  ]
[; ;doprnt.c: 540: while(c = *f++) {
"540
[e $U 21  ]
[e :U 22 ]
{
[; ;doprnt.c: 542: if(c != '%')
"542
[e $ ! != -> -> _c `i `ui -> 37 `ui 24  ]
[; ;doprnt.c: 544: {
"544
{
[; ;doprnt.c: 545: ((*sp++ = (c)));
"545
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> _c `uc ]
[; ;doprnt.c: 546: continue;
"546
[e $U 21  ]
"547
}
[e :U 24 ]
[; ;doprnt.c: 547: }
[; ;doprnt.c: 550: width = 0;
"550
[e = _width -> 0 `i ]
[; ;doprnt.c: 552: flag = 0;
"552
[e = _flag -> -> 0 `i `us ]
[; ;doprnt.c: 601: if(isdigit((unsigned)*f)) {
"601
[e $ ! ( _isdigit (1 -> -> *U _f `ui `uc 25  ]
{
[; ;doprnt.c: 602: width = 0;
"602
[e = _width -> 0 `i ]
[; ;doprnt.c: 603: do
"603
[e :U 28 ]
[; ;doprnt.c: 604: width = width*10 + *f++ - '0';
"604
[e = _width -> - -> + * _width -> 10 `i -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `i `ui -> 48 `ui `i ]
[; ;doprnt.c: 605: while(isdigit((unsigned)*f));
"605
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 28  ]
[e :U 27 ]
"611
}
[e :U 25 ]
[; ;doprnt.c: 611: }
[; ;doprnt.c: 614: if(*f == '.') {
"614
[e $ ! == -> *U _f `ui -> 46 `ui 29  ]
{
[; ;doprnt.c: 615: flag |= 0x4000;
"615
[e =| _flag -> -> 16384 `i `us ]
[; ;doprnt.c: 616: f++;
"616
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 623: {
"623
{
[; ;doprnt.c: 624: prec = 0;
"624
[e = _prec -> 0 `i ]
[; ;doprnt.c: 625: while(isdigit((unsigned)*f))
"625
[e $U 30  ]
[e :U 31 ]
[; ;doprnt.c: 626: prec = prec*10 + *f++ - '0';
"626
[e = _prec -> - -> + * _prec -> 10 `i -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `i `ui -> 48 `ui `i ]
[e :U 30 ]
"625
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 31  ]
[e :U 32 ]
"627
}
"628
}
[; ;doprnt.c: 627: }
[; ;doprnt.c: 628: } else {
[e $U 33  ]
[e :U 29 ]
{
[; ;doprnt.c: 629: prec = 0;
"629
[e = _prec -> 0 `i ]
[; ;doprnt.c: 631: flag |= 0x1000;
"631
[e =| _flag -> -> 4096 `i `us ]
"633
}
[e :U 33 ]
[; ;doprnt.c: 633: }
[; ;doprnt.c: 638: switch(c = *f++) {
"638
[e $U 35  ]
{
[; ;doprnt.c: 640: case 0:
"640
[e :U 36 ]
[; ;doprnt.c: 641: goto alldone;
"641
[e $U 37  ]
[; ;doprnt.c: 665: case 'f':
"665
[e :U 38 ]
[; ;doprnt.c: 666: flag |= 0x400;
"666
[e =| _flag -> -> 1024 `i `us ]
[; ;doprnt.c: 667: break;
"667
[e $U 34  ]
[; ;doprnt.c: 805: default:
"805
[e :U 39 ]
[; ;doprnt.c: 816: continue;
"816
[e $U 21  ]
"825
}
[; ;doprnt.c: 825: }
[e $U 34  ]
"638
[e :U 35 ]
[e [\ = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c , $ -> -> 0 `i `c 36
 , $ -> -> 102 `ui `c 38
 39 ]
"825
[e :U 34 ]
[; ;doprnt.c: 828: if(flag & (0x700)) {
"828
[e $ ! != & -> _flag `ui -> -> 1792 `i `ui -> -> 0 `i `ui 40  ]
{
[; ;doprnt.c: 830: if(flag & 0x1000)
"830
[e $ ! != & -> _flag `ui -> -> 4096 `i `ui -> -> 0 `i `ui 41  ]
[; ;doprnt.c: 832: prec = 6;
"832
[e = _prec -> 6 `i ]
[e :U 41 ]
[; ;doprnt.c: 833: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
"833
[e = _fval *U -> ( ___va_arg , (. -> *U -> &U _ap `**d `*v -> -> 0 `i `d `*d ]
[; ;doprnt.c: 834: if(fval < 0.0) {
"834
[e $ ! < _fval .0.0 42  ]
{
[; ;doprnt.c: 835: fval = -fval;
"835
[e = _fval -U _fval ]
[; ;doprnt.c: 836: flag |= 0x03;
"836
[e =| _flag -> -> 3 `i `us ]
"837
}
[e :U 42 ]
[; ;doprnt.c: 837: }
[; ;doprnt.c: 838: exp = 0;
"838
[e = _exp -> 0 `i ]
[; ;doprnt.c: 839: if( fval!=0) {
"839
[e $ ! != _fval -> -> 0 `i `d 43  ]
{
[; ;doprnt.c: 840: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
"840
[e = *U &U _exp -> - & >> *U -> &U _fval `*ul -> 15 `i -> -> -> 255 `i `l `ul -> -> -> 126 `i `l `ul `i ]
[; ;doprnt.c: 841: exp--;
"841
[e -- _exp -> 1 `i ]
[; ;doprnt.c: 842: exp *= 3;
"842
[e =* _exp -> 3 `i ]
[; ;doprnt.c: 843: exp /= 10;
"843
[e =/ _exp -> -> 10 `uc `i ]
[; ;doprnt.c: 844: if(exp < 0)
"844
[e $ ! < _exp -> 0 `i 44  ]
[; ;doprnt.c: 845: exp--;
"845
[e -- _exp -> 1 `i ]
[e :U 44 ]
[; ;doprnt.c: 849: integ = scale(-exp);
"849
[e = _integ ( _scale (1 -> -U _exp `c ]
[; ;doprnt.c: 850: integ *= fval;
"850
[e =* _integ _fval ]
[; ;doprnt.c: 851: if(integ < 1.0)
"851
[e $ ! < _integ .1.0 45  ]
[; ;doprnt.c: 852: exp--;
"852
[e -- _exp -> 1 `i ]
[e $U 46  ]
"853
[e :U 45 ]
[; ;doprnt.c: 853: else if(integ >= 10.0)
[e $ ! >= _integ .10.0 47  ]
[; ;doprnt.c: 854: exp++;
"854
[e ++ _exp -> 1 `i ]
[e :U 47 ]
"855
[e :U 46 ]
}
[e :U 43 ]
[; ;doprnt.c: 855: }
[; ;doprnt.c: 1115: if(prec <= 12)
"1115
[e $ ! <= _prec -> 12 `i 48  ]
[; ;doprnt.c: 1116: fval += fround(prec);
"1116
[e =+ _fval ( _fround (1 -> _prec `uc ]
[e :U 48 ]
[; ;doprnt.c: 1119: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
"1119
[e $ ! || > _exp -> 9 `i && && != _fval -> -> 0 `i `d == -> _fval `ul -> -> -> 0 `i `l `ul > _exp -> 1 `i 49  ]
{
[; ;doprnt.c: 1123: if(integ < 4.294967296){
"1123
[e $ ! < _integ .4.294967296 50  ]
{
[; ;doprnt.c: 1124: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
"1124
[e =- _exp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 1 `i `ui `i ]
"1125
}
[; ;doprnt.c: 1125: }else{
[e $U 51  ]
[e :U 50 ]
{
[; ;doprnt.c: 1126: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
"1126
[e =- _exp -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i ]
"1127
}
[e :U 51 ]
[; ;doprnt.c: 1127: }
[; ;doprnt.c: 1128: integ = scale(exp);
"1128
[e = _integ ( _scale (1 -> _exp `c ]
[; ;doprnt.c: 1129: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l_(fval,integ));
"1129
[e = . __val 0 ? == -> # `d `ui -> -> 3 `i `ui : ( __tdiv_to_l_ (2 , -> _fval `f -> _integ `f ( __div_to_l_ (2 , _fval _integ ]
[; ;doprnt.c: 1132: fval = 0.0;
"1132
[e = _fval .0.0 ]
"1133
}
[; ;doprnt.c: 1133: } else {
[e $U 52  ]
[e :U 49 ]
{
[; ;doprnt.c: 1134: _val._val = (unsigned long)fval;
"1134
[e = . __val 0 -> _fval `ul ]
[; ;doprnt.c: 1135: fval -= (double)_val._val;
"1135
[e =- _fval -> . __val 0 `d ]
[; ;doprnt.c: 1136: exp = 0;
"1136
[e = _exp -> 0 `i ]
"1137
}
[e :U 52 ]
[; ;doprnt.c: 1137: }
[; ;doprnt.c: 1139: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
"1139
{
[e = _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 53  ]
[e $U 54  ]
"1140
[e :U 53 ]
[; ;doprnt.c: 1140: if(_val._val < dpowers[c])
[e $ ! < . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux 56  ]
[; ;doprnt.c: 1141: break;
"1141
[e $U 54  ]
[e :U 56 ]
"1139
[e ++ _c -> -> 1 `i `c ]
[e $ != -> -> _c `i `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 53  ]
[e :U 54 ]
"1145
}
[; ;doprnt.c: 1145: width -= prec + c + exp;
[e =- _width + + _prec -> _c `i _exp ]
[; ;doprnt.c: 1146: if(
[; ;doprnt.c: 1150: prec)
"1150
[e $ ! != _prec -> 0 `i 57  ]
[; ;doprnt.c: 1151: width--;
"1151
[e -- _width -> 1 `i ]
[e :U 57 ]
[; ;doprnt.c: 1152: if(flag & 0x03)
"1152
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 58  ]
[; ;doprnt.c: 1153: width--;
"1153
[e -- _width -> 1 `i ]
[e :U 58 ]
[; ;doprnt.c: 1176: {
"1176
{
[; ;doprnt.c: 1181: while(width > 0) {
"1181
[e $U 59  ]
[e :U 60 ]
{
[; ;doprnt.c: 1182: ((*sp++ = (' ')));
"1182
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1183: width--;
"1183
[e -- _width -> 1 `i ]
"1184
}
[e :U 59 ]
"1181
[e $ > _width -> 0 `i 60  ]
[e :U 61 ]
[; ;doprnt.c: 1184: }
[; ;doprnt.c: 1189: if(flag & 0x03)
"1189
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 62  ]
[; ;doprnt.c: 1191: ((*sp++ = ('-')));
"1191
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 62 ]
"1196
}
[; ;doprnt.c: 1196: }
[; ;doprnt.c: 1197: while(c--) {
"1197
[e $U 63  ]
[e :U 64 ]
{
[; ;doprnt.c: 1201: ((*sp++ = ('0' + (_val._val/dpowers[c])%10)));
"1201
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> -> 48 `ui `ul % / . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul `uc ]
"1203
}
[e :U 63 ]
"1197
[e $ != -> -- _c -> -> 1 `i `c `i -> -> -> 0 `i `c `i 64  ]
[e :U 65 ]
[; ;doprnt.c: 1203: }
[; ;doprnt.c: 1204: while(exp > 0) {
"1204
[e $U 66  ]
[e :U 67 ]
{
[; ;doprnt.c: 1205: ((*sp++ = ('0')));
"1205
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1206: exp--;
"1206
[e -- _exp -> 1 `i ]
"1207
}
[e :U 66 ]
"1204
[e $ > _exp -> 0 `i 67  ]
[e :U 68 ]
[; ;doprnt.c: 1207: }
[; ;doprnt.c: 1208: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
"1208
[e $ ! > _prec -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `i 69  ]
[; ;doprnt.c: 1209: c = (sizeof dpowers/sizeof dpowers[0])-2;
"1209
[e = _c -> - / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui -> -> 2 `i `ui `c ]
[e $U 70  ]
"1210
[e :U 69 ]
[; ;doprnt.c: 1210: else
[; ;doprnt.c: 1211: c = prec;
"1211
[e = _c -> _prec `c ]
[e :U 70 ]
[; ;doprnt.c: 1212: prec -= c;
"1212
[e =- _prec -> _c `i ]
[; ;doprnt.c: 1216: if(c)
"1216
[e $ ! != -> _c `i -> -> -> 0 `i `c `i 71  ]
[; ;doprnt.c: 1218: ((*sp++ = ('.')));
"1218
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 46 `ui `uc ]
[e :U 71 ]
[; ;doprnt.c: 1224: _val._val = (long)(fval * scale(c));
"1224
[e = . __val 0 -> -> * _fval ( _scale (1 _c `l `ul ]
[; ;doprnt.c: 1225: while(c--) {
"1225
[e $U 72  ]
[e :U 73 ]
{
[; ;doprnt.c: 1226: ((*sp++ = ('0' + (_val._val/dpowers[c])%10)));
"1226
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> + -> -> 48 `ui `ul % / . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul `uc ]
[; ;doprnt.c: 1227: _val._val %= dpowers[c];
"1227
[e =% . __val 0 *U + &U _dpowers * -> -> _c `uc `ux -> -> # *U &U _dpowers `ui `ux ]
"1228
}
[e :U 72 ]
"1225
[e $ != -> -- _c -> -> 1 `i `c `i -> -> -> 0 `i `c `i 73  ]
[e :U 74 ]
[; ;doprnt.c: 1228: }
[; ;doprnt.c: 1230: while(prec) {
"1230
[e $U 75  ]
[e :U 76 ]
{
[; ;doprnt.c: 1231: ((*sp++ = ('0')));
"1231
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 48 `ui `uc ]
[; ;doprnt.c: 1232: prec--;
"1232
[e -- _prec -> 1 `i ]
"1233
}
[e :U 75 ]
"1230
[e $ != _prec -> 0 `i 76  ]
[e :U 77 ]
[; ;doprnt.c: 1233: }
[; ;doprnt.c: 1240: continue;
"1240
[e $U 21  ]
"1241
}
[e :U 40 ]
[; ;doprnt.c: 1241: }
[; ;doprnt.c: 1285: if(prec == 0 && _val._val == 0)
"1285
[e $ ! && == _prec -> 0 `i == . __val 0 -> -> -> 0 `i `l `ul 78  ]
[; ;doprnt.c: 1286: prec++;
"1286
[e ++ _prec -> 1 `i ]
[e :U 78 ]
[; ;doprnt.c: 1334: if(c < prec)
"1334
[e $ ! < -> _c `i _prec 79  ]
[; ;doprnt.c: 1335: c = prec;
"1335
[e = _c -> _prec `c ]
[e $U 80  ]
"1336
[e :U 79 ]
[; ;doprnt.c: 1336: else if(prec < c)
[e $ ! < _prec -> _c `i 81  ]
[; ;doprnt.c: 1337: prec = c;
"1337
[e = _prec -> _c `i ]
[e :U 81 ]
"1340
[e :U 80 ]
[; ;doprnt.c: 1340: if(width && flag & 0x03)
[e $ ! && != _width -> 0 `i != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 82  ]
[; ;doprnt.c: 1341: width--;
"1341
[e -- _width -> 1 `i ]
[e :U 82 ]
[; ;doprnt.c: 1343: if(flag & 0x4000) {
"1343
[e $ ! != & -> _flag `ui -> -> 16384 `i `ui -> -> 0 `i `ui 83  ]
{
[; ;doprnt.c: 1344: if(width > prec)
"1344
[e $ ! > _width _prec 84  ]
[; ;doprnt.c: 1345: width -= prec;
"1345
[e =- _width _prec ]
[e $U 85  ]
"1346
[e :U 84 ]
[; ;doprnt.c: 1346: else
[; ;doprnt.c: 1347: width = 0;
"1347
[e = _width -> 0 `i ]
[e :U 85 ]
"1348
}
[e :U 83 ]
[; ;doprnt.c: 1348: }
[; ;doprnt.c: 1376: if(width > c)
"1376
[e $ ! > _width -> _c `i 86  ]
[; ;doprnt.c: 1377: width -= c;
"1377
[e =- _width -> _c `i ]
[e $U 87  ]
"1378
[e :U 86 ]
[; ;doprnt.c: 1378: else
[; ;doprnt.c: 1379: width = 0;
"1379
[e = _width -> 0 `i ]
[e :U 87 ]
[; ;doprnt.c: 1417: {
"1417
{
[; ;doprnt.c: 1419: if(width
[; ;doprnt.c: 1423: )
"1423
[e $ ! != _width -> 0 `i 88  ]
[; ;doprnt.c: 1424: do
"1424
[e :U 91 ]
[; ;doprnt.c: 1425: ((*sp++ = (' ')));
"1425
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 32 `ui `uc ]
[; ;doprnt.c: 1426: while(--width);
"1426
[e $ != =- _width -> 1 `i -> 0 `i 91  ]
[e :U 90 ]
[e :U 88 ]
[; ;doprnt.c: 1433: if(flag & 0x03)
"1433
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 92  ]
[; ;doprnt.c: 1434: ((*sp++ = ('-')));
"1434
[e = *U ++ _sp * -> -> 1 `i `x -> -> # *U _sp `i `x -> -> 45 `ui `uc ]
[e :U 92 ]
"1464
}
"1525
}
[e :U 21 ]
"540
[e $ != -> = _c -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `c `i -> -> -> 0 `i `c `i 22  ]
[e :U 23 ]
[; ;doprnt.c: 1464: }
[; ;doprnt.c: 1525: }
[; ;doprnt.c: 1527: alldone:
"1527
[e :U 37 ]
[; ;doprnt.c: 1530: *sp = 0;
"1530
[e = *U _sp -> -> 0 `i `uc ]
[; ;doprnt.c: 1532: return 0;
"1532
[e ) -> 0 `i ]
[e $UE 20  ]
[; ;doprnt.c: 1533: }
"1533
[e :UE 20 ]
}
